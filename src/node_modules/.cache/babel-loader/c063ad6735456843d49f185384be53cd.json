{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect, useMemo } from 'react';\nimport { get_cashFlow, delete_cashFlow } from './api/cashFow_CRUD';\nimport useGlobalState from \"../../../Store_&_State/GlobalState\";\nimport useAccess from \"../../auths/accessToken\";\nimport { useEffectOnce } from \"../../../custom_Hooks/useEffectOnce\";\nimport { ScrollSync, ScrollSyncPane } from 'react-scroll-sync';\nimport Moment from 'react-moment';\nimport moment from \"moment\";\n\nfunction FlowDomManagement(prop) {\n  _s();\n\n  const getData = async () => {\n    await get_cashFlow(flow_Success, flow_fail, access, set_Access);\n  };\n\n  useEffectOnce(() => {\n    console.log(\"flow useEffet getting data\");\n    getData();\n  }, [streamList, stream, reRender]); //   const [flowList, setFlowList] = useState([]);\n  //   const [flow, setFlow] = useState([]);\n  //   const [flowPages, setFlowPages] = useState([]);\n  //   const [flowPage, setFlowPage] = useState(0);\n  //   const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n  //   const [emptyTR, setEmptyTR] = useState([]);\n  //   const [flowId, setFlowId] = useState([]);\n  //   const {access, setAccess} = useAccess('')\n  //   const {streamList, setStreamList} = useGlobalState([]);\n  //   const {stream, setStream} = useGlobalState([]);\n  //   const {createFlowModalIsOpen, setCreateFlowIsOpen} = useGlobalState([]);\n  //   const {reRender, setReRender} = useGlobalState([0]);\n  //   const streamWidth = 14.4\n  //   const periodWidth = 28\n  //   const flowWidth = streamWidth/2\n  //   const snWidth = periodWidth*(0.1)\n  //   const dateWidth = periodWidth*(0.2)\n  //   const descriptionWidth = periodWidth*(0.7)\n  //   const [display, setDisplay] = useState(\"none\");\n  //   const [offsetTop, setoffsetTop] = useState(0);\n  //   const [trHeight, setTrHeight] = useState(0);\n  //   const table_width = (stream.length*streamWidth) + periodWidth\n  //   const set_Access = (Access_token) => {\n  //     setAccess(Access_token)\n  //   }\n  //   useEffectOnce(() => {\n  //       set_Access()\n  //     },[]\n  //   )\n  //   const flow_Success = async(data) => {\n  //     console.log('data extracton on flow successful')\n  //     console.log('setting flowList')\n  //     setFlowList(data.results);\n  //     console.log(data.results)\n  //     console.log('finished setting flowList')\n  //   };\n  //   const flow_fail = (text) => {\n  //     console.log(\"Error: \", text)\n  //   }\n  //   const getData = async()=>{\n  //     await get_cashFlow(flow_Success, flow_fail, access, set_Access);\n  //   };\n  //   useEffectOnce(()=>{\n  //     console.log(\"flow useEffet getting data\")\n  //     getData();\n  //   }, [streamList, stream, reRender]);\n  //   const deleteFlowData = async()=>{\n  //     await delete_cashFlow(flowId, () =>{getData()}, access, set_Access);\n  //     // getData()\n  //     setDisplay(\"none\")\n  //   };\n  //   const mouseInEditDelete = (e) => {\n  //     let target = e.target\n  //     let scrolled_by = document.getElementsByClassName('tbody_class')[0].scrollTop\n  //     if (target.offsetTop===0){\n  //       const sticky_offset = flowList.length-target.parentElement.firstChild.innerText\n  //       const id = sticky_offset\n  //       let sticky_scroll = document.getElementsByClassName('sticky_offset')[id].offsetTop\n  //       setoffsetTop(sticky_scroll-scrolled_by)\n  //     }else{\n  //       setoffsetTop(target.offsetTop - scrolled_by)\n  //     }\n  //     setFlowId(target.id)\n  //     setTrHeight(target.scrolled_by)\n  //     setDisplay(\"flex\")\n  //   }\n  //   const mouseOutEditDelete = () => {\n  //     // alert('mouce out')\n  //     setDisplay(\"none\")\n  //   }\n  //   // send flow list to the dom\n  //   useEffect(() => {   \n  //     console.log(\"preparing to send flow to the DOM\")\n  //     let newList = []\n  //     const trEmpty = []\n  //     const data = Array.from(streamList)\n  //     console.log('about to map stream and flow lists and set new list')\n  //     data.map(\n  //         function(streamItem, id, arr){\n  //           // console.log('mapping through stream list')\n  //           trEmpty.push(\n  //             <>\n  //               <div className=\"td\" style={{width:`${flowWidth}vw`}}></div>\n  //               <div className=\"td\" style={{width:`${flowWidth}vw`}}></div>\n  //             </>\n  //           );\n  //           return (\n  //               flowList.map(\n  //                 function(flowItem, pk, flow_arr){\n  //                   // console.log(\"mapping through flow list\")\n  //                   if (flowItem.CashStream_Data.name === arr[id].name){\n  //                   const nullTd = [];\n  //                   const reversNullTd = [];\n  //                   const editDelete = [];\n  //                     for( var i =0; i < id; i++ ){\n  //                       nullTd.push(\n  //                         <>\n  //                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n  //                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n  //                         </>\n  //                       );\n  //                     };\n  //                     for(var i = (arr.length-1); id < i; i-- ){\n  //                       reversNullTd.push(\n  //                         <>\n  //                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n  //                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n  //                         </>\n  //                       );\n  //                     };\n  //                     const date = moment(new Date(flowItem.created_at)).format('YYYY-MM-DD').replace(/-|:|[ \\t]/g,\"\");\n  //                     const time = moment(new Date(flowItem.created_at)).format('HH:mm').replace(/-|:|[ \\t]/g,\"\");\n  //                     const sortByDateTime = date+time\n  //                     newList.push(\n  //                       <>\n  //                         <div  className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete} >\n  //                           <div className=\"tr sticky_offset\" style={{ position: 'sticky', left: `${0}`}} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n  //                             <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}vw`}}>{flow_arr.length-pk}</div> \n  //                             <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}vw`}}> \n  //                               <small style={{textAlign:'center'}}>\n  //                                 <Moment format=\"YYYY/MM/DD HH:mm\">\n  //                                   {flowItem.created_at}\n  //                                 </Moment>\n  //                               </small>\n  //                             </div>\n  //                             <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}vw`}}>{flowItem.description}</div>\n  //                           </div>\n  //                           {/* {moment(new Date(flowItem.created_at.slice(0, 10))).format('DD-MM-YYYY')} */}\n  //                           <div className='tr'>\n  //                             {nullTd}\n  //                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>{flowItem.Debit}</div> \n  //                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>{flowItem.Credit}</div>\n  //                             {reversNullTd}\n  //                           </div>\n  //                         </div>\n  //                       </>\n  //                     )\n  //                   }\n  //                 }\n  //               )\n  //         )\n  //         }\n  //       )\n  //     console.log(\"finished setting new flow list whiling mapping\")\n  //     console.log('new list: '+newList)\n  //     console.log(newList)\n  //     console.log(\"setting flow\")\n  //     setFlow( newList );\n  //     setEmptyTR(trEmpty)\n  //   }, [stream, access,flowList,flowPage]);\n  //   // const sortedFlow = flow.sort(function(a, b){return a.key - b.key})\n  //   const sortedFlow = flow.sort((a, b) => a.itemM > b.itemM ? 1 : -1)\n  //   // console.log(sortedFlow)\n  //   return (\n  //     <ScrollSyncPane>\n  //           <div id=\"tbody\" className='tbody_class'>\n  //             <div style={{ width:`${table_width}vw`}}>\n  //               {/* {flow.sort(function(a, b){return a.key - b.key})} */}\n  //               {sortedFlow}\n  //               <div className=\"tr\" id=\"addTr\" >\n  //                 <div  className=\"tr\" style={{position: 'sticky', left: `${0}`}}>\n  //                   <div className=\"td\" style={{width:`${snWidth}vw`}}></div> \n  //                   <div className=\"td\" style={{width:`${dateWidth}vw`}}></div>\n  //                   <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}vw`}}>\n  //                     <button id='open_CreateFlowModal_btn' onClick={()=>{setCreateFlowIsOpen(true); prop.blur(8)}}>Add</button>\n  //                   </div>\n  //                 </div>\n  //                 <div className=\"tr\">{emptyTR}</div>\n  //               </div>\n  //             </div>\n  //             <div id=\"EditDeleteOverlay\" onMouseOver={()=>{ setDisplay(\"flex\") }} onMouseOut={mouseOutEditDelete} style={{  display:display, top:offsetTop, height:trHeight}} >\n  //               <button onClick={deleteFlowData} >X</button><br/>\n  //               <button></button>\n  //             </div>\n  //           </div>\n  // </ScrollSyncPane>\n  //   )\n}\n\n_s(FlowDomManagement, \"CDxPF1ymP5P7fskLwxmw8nmIJ1w=\", false, function () {\n  return [useEffectOnce];\n});\n\n_c = FlowDomManagement;\nexport default FlowDomManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlowDomManagement\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","get_cashFlow","delete_cashFlow","useGlobalState","useAccess","useEffectOnce","ScrollSync","ScrollSyncPane","Moment","moment","FlowDomManagement","prop","getData","flow_Success","flow_fail","access","set_Access","console","log","streamList","stream","reRender"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/ledger/components/Flow.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect, useMemo } from 'react';\nimport {get_cashFlow, delete_cashFlow} from './api/cashFow_CRUD'\nimport useGlobalState from \"../../../Store_&_State/GlobalState\"\nimport useAccess from \"../../auths/accessToken\"\nimport {useEffectOnce} from \"../../../custom_Hooks/useEffectOnce\"\nimport { ScrollSync, ScrollSyncPane } from 'react-scroll-sync';\nimport Moment from 'react-moment';\nimport moment from \"moment\";\n\nfunction FlowDomManagement(prop) {\n  const getData = async()=>{\n        await get_cashFlow(flow_Success, flow_fail, access, set_Access);\n      };\n    \n      useEffectOnce(()=>{\n        console.log(\"flow useEffet getting data\")\n        getData();\n      }, [streamList, stream, reRender]);\n//   const [flowList, setFlowList] = useState([]);\n//   const [flow, setFlow] = useState([]);\n//   const [flowPages, setFlowPages] = useState([]);\n//   const [flowPage, setFlowPage] = useState(0);\n//   const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n//   const [emptyTR, setEmptyTR] = useState([]);\n//   const [flowId, setFlowId] = useState([]);\n\n//   const {access, setAccess} = useAccess('')\n//   const {streamList, setStreamList} = useGlobalState([]);\n//   const {stream, setStream} = useGlobalState([]);\n//   const {createFlowModalIsOpen, setCreateFlowIsOpen} = useGlobalState([]);\n//   const {reRender, setReRender} = useGlobalState([0]);\n\n//   const streamWidth = 14.4\n//   const periodWidth = 28\n//   const flowWidth = streamWidth/2\n//   const snWidth = periodWidth*(0.1)\n//   const dateWidth = periodWidth*(0.2)\n//   const descriptionWidth = periodWidth*(0.7)\n\n//   const [display, setDisplay] = useState(\"none\");\n//   const [offsetTop, setoffsetTop] = useState(0);\n//   const [trHeight, setTrHeight] = useState(0);\n//   const table_width = (stream.length*streamWidth) + periodWidth\n\n//   const set_Access = (Access_token) => {\n//     setAccess(Access_token)\n//   }\n//   useEffectOnce(() => {\n//       set_Access()\n//     },[]\n//   )\n\n//   const flow_Success = async(data) => {\n//     console.log('data extracton on flow successful')\n//     console.log('setting flowList')\n//     setFlowList(data.results);\n//     console.log(data.results)\n//     console.log('finished setting flowList')\n//   };\n\n//   const flow_fail = (text) => {\n//     console.log(\"Error: \", text)\n//   }\n\n//   const getData = async()=>{\n//     await get_cashFlow(flow_Success, flow_fail, access, set_Access);\n//   };\n\n//   useEffectOnce(()=>{\n//     console.log(\"flow useEffet getting data\")\n//     getData();\n//   }, [streamList, stream, reRender]);\n\n//   const deleteFlowData = async()=>{\n//     await delete_cashFlow(flowId, () =>{getData()}, access, set_Access);\n//     // getData()\n//     setDisplay(\"none\")\n//   };\n\n  \n//   const mouseInEditDelete = (e) => {\n//     let target = e.target\n//     let scrolled_by = document.getElementsByClassName('tbody_class')[0].scrollTop\n    \n//     if (target.offsetTop===0){\n//       const sticky_offset = flowList.length-target.parentElement.firstChild.innerText\n//       const id = sticky_offset\n//       let sticky_scroll = document.getElementsByClassName('sticky_offset')[id].offsetTop\n//       setoffsetTop(sticky_scroll-scrolled_by)\n//     }else{\n//       setoffsetTop(target.offsetTop - scrolled_by)\n//     }\n    \n//     setFlowId(target.id)\n//     setTrHeight(target.scrolled_by)\n//     setDisplay(\"flex\")\n//   }\n  \n  \n//   const mouseOutEditDelete = () => {\n//     // alert('mouce out')\n//     setDisplay(\"none\")\n//   }\n  \n  \n//   // send flow list to the dom\n//   useEffect(() => {   \n//     console.log(\"preparing to send flow to the DOM\")\n\n//     let newList = []\n//     const trEmpty = []\n//     const data = Array.from(streamList)\n\n//     console.log('about to map stream and flow lists and set new list')\n//     data.map(\n//         function(streamItem, id, arr){\n//           // console.log('mapping through stream list')\n          \n//           trEmpty.push(\n//             <>\n//               <div className=\"td\" style={{width:`${flowWidth}vw`}}></div>\n//               <div className=\"td\" style={{width:`${flowWidth}vw`}}></div>\n//             </>\n//           );\n          \n//           return (\n//               flowList.map(\n//                 function(flowItem, pk, flow_arr){\n//                   // console.log(\"mapping through flow list\")\n\n//                   if (flowItem.CashStream_Data.name === arr[id].name){\n//                   const nullTd = [];\n//                   const reversNullTd = [];\n//                   const editDelete = [];\n\n//                     for( var i =0; i < id; i++ ){\n//                       nullTd.push(\n//                         <>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n//                         </>\n//                       );\n//                     };\n\n//                     for(var i = (arr.length-1); id < i; i-- ){\n//                       reversNullTd.push(\n//                         <>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>0</div>\n//                         </>\n//                       );\n\n//                     };\n\n//                     const date = moment(new Date(flowItem.created_at)).format('YYYY-MM-DD').replace(/-|:|[ \\t]/g,\"\");\n//                     const time = moment(new Date(flowItem.created_at)).format('HH:mm').replace(/-|:|[ \\t]/g,\"\");\n//                     const sortByDateTime = date+time\n\n//                     newList.push(\n//                       <>\n//                         <div  className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete} >\n//                           <div className=\"tr sticky_offset\" style={{ position: 'sticky', left: `${0}`}} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}vw`}}>{flow_arr.length-pk}</div> \n//                             <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}vw`}}> \n//                               <small style={{textAlign:'center'}}>\n//                                 <Moment format=\"YYYY/MM/DD HH:mm\">\n//                                   {flowItem.created_at}\n//                                 </Moment>\n//                               </small>\n//                             </div>\n//                             <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}vw`}}>{flowItem.description}</div>\n//                           </div>\n//                           {/* {moment(new Date(flowItem.created_at.slice(0, 10))).format('DD-MM-YYYY')} */}\n//                           <div className='tr'>\n//                             {nullTd}\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>{flowItem.Debit}</div> \n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}vw`}}>{flowItem.Credit}</div>\n//                             {reversNullTd}\n//                           </div>\n//                         </div>\n//                       </>\n//                     )\n//                   }\n//                 }\n//               )\n//         )\n//         }\n//       )\n      \n//     console.log(\"finished setting new flow list whiling mapping\")\n//     console.log('new list: '+newList)\n//     console.log(newList)\n//     console.log(\"setting flow\")\n//     setFlow( newList );\n//     setEmptyTR(trEmpty)\n//   }, [stream, access,flowList,flowPage]);\n  \n  \n//   // const sortedFlow = flow.sort(function(a, b){return a.key - b.key})\n//   const sortedFlow = flow.sort((a, b) => a.itemM > b.itemM ? 1 : -1)\n//   // console.log(sortedFlow)\n//   return (\n//     <ScrollSyncPane>\n//           <div id=\"tbody\" className='tbody_class'>\n//             <div style={{ width:`${table_width}vw`}}>\n//               {/* {flow.sort(function(a, b){return a.key - b.key})} */}\n//               {sortedFlow}\n//               <div className=\"tr\" id=\"addTr\" >\n//                 <div  className=\"tr\" style={{position: 'sticky', left: `${0}`}}>\n//                   <div className=\"td\" style={{width:`${snWidth}vw`}}></div> \n//                   <div className=\"td\" style={{width:`${dateWidth}vw`}}></div>\n//                   <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}vw`}}>\n//                     <button id='open_CreateFlowModal_btn' onClick={()=>{setCreateFlowIsOpen(true); prop.blur(8)}}>Add</button>\n//                   </div>\n//                 </div>\n                \n//                 <div className=\"tr\">{emptyTR}</div>\n//               </div>\n//             </div>\n//             <div id=\"EditDeleteOverlay\" onMouseOver={()=>{ setDisplay(\"flex\") }} onMouseOut={mouseOutEditDelete} style={{  display:display, top:offsetTop, height:trHeight}} >\n//               <button onClick={deleteFlowData} >X</button><br/>\n//               <button></button>\n//             </div>\n//           </div>\n// </ScrollSyncPane>\n          \n//   )\n}\n\n\nexport default FlowDomManagement"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AACA,SAAQC,YAAR,EAAsBC,eAAtB,QAA4C,oBAA5C;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,mBAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EAAA;;EAC/B,MAAMC,OAAO,GAAG,YAAS;IACnB,MAAMX,YAAY,CAACY,YAAD,EAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,UAAlC,CAAlB;EACD,CAFL;;EAIIX,aAAa,CAAC,MAAI;IAChBY,OAAO,CAACC,GAAR,CAAY,4BAAZ;IACAN,OAAO;EACR,CAHY,EAGV,CAACO,UAAD,EAAaC,MAAb,EAAqBC,QAArB,CAHU,CAAb,CAL2B,CASjiB;UAKHL,a;;;KALGK,iB;AA6NT,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}