{"ast":null,"code":"import { backendURL } from \"../../backendURL\";\nexport const verifyTokens = async (old_access, set_Access, success_Status) => {\n  const refreshtoken = localStorage.getItem(\"refreshToken\");\n  console.log(\"verifying tokens......\"); // Verifying access token___________________________________________________________________________________\n\n  f(\"verifying access token......\");\n  const verify_access_token = await fetch(`${backendURL}/user/verifyAccess/`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'Application/JSON',\n      'Content-Type': 'Application/json'\n    },\n    body: JSON.stringify({\n      access: `${old_access}`\n    })\n  });\n  console.log(\"finished verifying access token\");\n\n  if (verify_access_token.status === 400) {\n    console.log(\"access token expired......: \" + verify_access_token.status); // fetching new access and refresh token___________________________________________________________________________________\n\n    console.log(\"fetching new access and refresh token......\");\n    const get_tokens = await fetch(`${backendURL}/user/refresh/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'Application/JSON',\n        'Content-Type': 'Application/json'\n      },\n      body: JSON.stringify({\n        refresh: `${refreshtoken}`\n      })\n    });\n    const access_text = await get_tokens.text();\n    console.log('finished fetching access and refresh token');\n    console.log(get_tokens.status);\n\n    if (get_tokens.status == 200) {\n      console.log(\"fetching access and refresh token succesful\");\n      console.log(\"setting access and refresh token\");\n      localStorage.setItem(\"refreshToken\", JSON.parse(access_text).refresh);\n      set_Access(JSON.parse(access_text).access);\n      console.log('finished setting tokens');\n      await success_Status(get_tokens.status, JSON.parse(access_text).access);\n    }\n\n    if (get_tokens.status === (400 || 401)) {\n      console.log(\"failed to verify access and refresh token\"); // Verifying refresh token__________________________________________________________________________________\n\n      console.log('Verifying refresh token....');\n      const verify_refresh_token = await fetch(`${backendURL}/user/verifyRefresh/`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'Application/JSON',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh: `${refreshtoken}`\n        })\n      });\n      console.log('finished verifying refresh token');\n\n      if (verify_refresh_token.status === (401 || 400)) {\n        alert(\"session expired, please log in again\");\n        console.log('redirecting to login');\n        window.location.assign(\"/login\");\n      }\n\n      if (verify_refresh_token.status === 200) {\n        console.log(\"refresh token is valid\");\n      }\n    }\n  }\n\n  ;\n\n  if (verify_access_token.status === 200) {\n    console.log(\"access token is valid\");\n    await success_Status(verify_access_token.status, old_access);\n    console.log('access token verified');\n  }\n};","map":{"version":3,"names":["backendURL","verifyTokens","old_access","set_Access","success_Status","refreshtoken","localStorage","getItem","console","log","f","verify_access_token","fetch","method","headers","body","JSON","stringify","access","status","get_tokens","refresh","access_text","text","setItem","parse","verify_refresh_token","alert","window","location","assign"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/auths/verifyTokens.js"],"sourcesContent":["import {backendURL} from \"../../backendURL\"\n\nexport const verifyTokens = async (old_access, set_Access, success_Status) => {\n    \n    const refreshtoken =  localStorage.getItem(\"refreshToken\");\n    console.log(\"verifying tokens......\")\n    \n    // Verifying access token___________________________________________________________________________________\n    f(\"verifying access token......\")\n    const verify_access_token = await fetch(\n      `${backendURL}/user/verifyAccess/`,\n      {\n          method: 'POST',\n          headers: {\n              'Accept': 'Application/JSON',\n              'Content-Type': 'Application/json',\n          },\n          body: JSON.stringify({\n            access: `${old_access}`,\n          })\n      }\n    );\n    console.log(\"finished verifying access token\")\n  \n    if (verify_access_token.status === 400 ) {\n        console.log(\"access token expired......: \"+verify_access_token.status)\n\n        // fetching new access and refresh token___________________________________________________________________________________\n        console.log(\"fetching new access and refresh token......\")\n        const get_tokens = await fetch(\n            `${backendURL}/user/refresh/`,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'Application/JSON',\n                    'Content-Type': 'Application/json',\n                },\n                body: JSON.stringify({\n                    refresh: `${refreshtoken}`,\n                })\n            }\n        );\n        const access_text = await get_tokens.text();\n        console.log('finished fetching access and refresh token')\n\n        console.log(get_tokens.status)\n        \n        if (get_tokens.status == 200) {\n            console.log(\"fetching access and refresh token succesful\")\n            console.log(\"setting access and refresh token\")\n            localStorage.setItem(\"refreshToken\", JSON.parse(access_text).refresh);\n            set_Access(JSON.parse(access_text).access)\n            console.log('finished setting tokens')\n            await success_Status(get_tokens.status, JSON.parse(access_text).access)\n        }\n\n        if (get_tokens.status === (400||401)) {\n            console.log(\"failed to verify access and refresh token\")\n\n            // Verifying refresh token__________________________________________________________________________________\n            console.log('Verifying refresh token....')\n            const verify_refresh_token = await fetch(\n            `${backendURL}/user/verifyRefresh/`,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'Application/JSON',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    refresh: `${refreshtoken}`,\n                })\n            }\n            );\n            console.log('finished verifying refresh token')\n            \n        \n            if (verify_refresh_token.status === (401||400)) {\n                alert(\"session expired, please log in again\")\n                console.log('redirecting to login')\n                window.location.assign(\"/login\");\n            }\n\n            if (verify_refresh_token.status === 200) {\n                console.log(\"refresh token is valid\")\n            }\n      }\n  \n    };\n\n    if (verify_access_token.status === 200 ) {\n        console.log(\"access token is valid\")\n        await success_Status(verify_access_token.status, old_access)\n        console.log('access token verified')\n    }\n    \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}