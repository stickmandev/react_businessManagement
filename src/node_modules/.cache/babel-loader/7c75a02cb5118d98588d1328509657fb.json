{"ast":null,"code":"import{useState,useEffect,useMemo}from'react';import useAccess from\"../accessToken\";// import {}\nfunction Ledger(){console.log(\"cookie\"+document.cookie);var _useAccess=useAccess(''),access=_useAccess.access,setAccess=_useAccess.setAccess;//   setAccess(\"jdjdjk\")\nconsole.log(access);//   const [flowList, setFlowList] = useState([]);\n//   const [flow, setFlow] = useState([]);\n//   const [flowPages, setFlowPages] = useState([]);\n//   const [flowPage, setFlowPage] = useState(0);\n//   const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n//   const [emptyTR, setEmptyTR] = useState([]);\n//   const [flowId, setFlowId] = useState([]);\n//   const [steamList, setStreamList] = useState([]);\n//   const [stream, setStream] = useState([]);\n//   const [streamHeader, setStreamHeader] = useState([]);\n//   const [StreamPages, setStreamPages] = useState([]);\n//   const [Streampage, setStreamPage] = useState(0);\n//   const [display, setDisplay] = useState(\"none\");\n//   const [offsetTop, setoffsetTop] = useState(0);\n//   const [trHeight, setTrHeight] = useState(0);\n//   const streamWidth = 27.5\n//   const periodWidth = 46\n//   const snWidth = periodWidth*(0.1)\n//   const dateWidth = periodWidth*(0.2)\n//   const descriptionWidth = periodWidth*(0.7)\n//   const flowWidth = streamWidth/2\n//   const table_width = (stream.length*streamWidth) + periodWidth\n//   // CashStream data management----------------------------------------------------------------------------------------------------\n//   const stream_Success = async(data) => {\n//     await setStreamList(data.results);\n//     const newPages = [];\n//     if (data.count > 10) {\n//       for (let i=0; i<Math.ceil(data.count / 10); i++) {\n//         newPages.push({\n//           name: (i+1).toString(),\n//           page: i,\n//         });\n//         console.log(\"page\",i);\n//       }\n//       if (Streampage > newPages.length-1) {\n//         await setStreamPage(Streampage-1);\n//       }\n//     } else {\n//       await setStreamPage(0);\n//     }\n//     await setStreamPages(newPages);\n//   };\n//   const getStreamData = async()=>{\n//     await get_cashStream(Streampage, stream_Success, (text)=>{console.log(\"Error: \", text)});\n//   };\n//   useEffect(()=>{\n//     getStreamData();\n//   }, [Streampage]);\n//   useEffect(() => {\n//     setStream(\n//       steamList.map(function(item){\n//         return(\n//           <div className=\"th stream\" coldiv=\"2\" style={{width:`${streamWidth}%`}}>{item.name}</div>\n//         )\n//       })\n//     );\n//     setStreamHeader(\n//       steamList.map(function(item){\n//         return(\n//           <>\n//             <div className=\"th\" rowdiv=\"2\" style={{width:`${flowWidth}%`}}>Credit</div>\n//             <div className=\"th\" rowdiv=\"2\" style={{width:`${flowWidth}%`}}>Debit</div>\n//           </>\n//         )\n//       })\n//     )\n//   }, [steamList]);\n//   // CashFlow data management--------------------------------------------------------------------------------------------------\n//   const flow_Success = async(data) => {\n//     await setFlowList(data.results);\n//     const newPages = [];\n//     if (data.count > 10) {\n//       for (let i=0; i<Math.ceil(data.count / 10); i++) {\n//         newPages.push({\n//           name: (i+1).toString(),\n//           page: i,\n//         });\n//         // console.log(\"page\",i);\n//       }\n//       if (flowPage > newPages.length-1) {\n//         await setFlowPage(page-1);\n//       }\n//     } else {\n//       await setFlowPage(0);\n//     }\n//     await setFlowPages(newPages);\n//   };\n//   const getData = async()=>{\n//     await get_cashFlow(flowPage, flow_Success, (text)=>{console.log(\"Error: \", text)});\n//   };\n//   useEffect(async()=>{\n//     await getData();\n//   }, [flowPage]);\n//   // send flow list to the dom\n//     useEffect(() => {   \n//       let newList = []\n//       const trEmpty = []\n//         steamList.map(\n//           function(streamItem, id, arr){\n//             trEmpty.push(\n//               <>\n//                 <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n//                 <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n//               </>\n//             );\n//             return (\n//                 flowList.map(\n//                   async function(flowItem, pk, flow_arr){\n//                     if (flowItem.CashStream_Data.name === arr[id].name){\n//                     const nullTd = [];\n//                     const reversNullTd = [];\n//                     const editDelete = [];\n//                       for( var i =0; i < id; i++ ){\n//                         nullTd.push(\n//                           <>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                           </>\n//                         );\n//                       };\n//                       for(var i = (arr.length-1); id < i; i-- ){\n//                         reversNullTd.push(\n//                           <>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                           </>\n//                         );\n//                       };\n//                       const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n//                       await newList.push(\n//                         <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n//                           <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n//                           <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n//                           {nullTd}\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n//                           {reversNullTd}\n//                         </div>\n//                       )\n//                     }\n//                   }\n//                 )\n//           )\n//           }\n//         )\n//       setFlow( newList );\n//       setEmptyTR(trEmpty)\n//   }, [flowList, setFlow, deleteFlowData]);\n//   // delete flow data\n//   const deleteFlowData = async()=>{\n//     await delete_cashFlow(flowId, flow_Success);\n//     getData()\n//     setDisplay(\"none\")\n//   };\n// // const boxRef = React.useRef(null);\n// // const table_overlayRef = React.useRef(null);\n// // const mouseInEditDelete = (e) => {\n// //   setDisplay(\"flex\")\n// //   let target = e.target\n// //   // let elem = document.getElementsByClassName('flowTr')[0].getClientRects()[0]\n// //   // console.log(e);\n// //   // console.log(elem);\n// // //   console.log(document.getElementsByClassName('flowTr')[0].getClientRects()[0])\n// // //   console.log(boxRef);\n// //   // console.log(table_overlayRef.offsetTop);\n// // //   console.log(e.target.offsetTop);\n// //   // console.log(\"screenY:\" + e.screenY);\n// //   // console.log(\"offsetY:\" + e.pageY);\n// //   // console.log(\"clientY:\" + e.clientY);\n// // //   console.log(target.offsetTop);\n// // //   setoffsetBottom(target.offsetHeight)\n// // //   setoffsetTop(boxRef.current.scrollHeight)\n// // //   setoffsetTop(target.offsetTop )\n// //   if(target.offsetTop<(table_overlayRef.offsetTop+table_overlayRef.offsetHeight)){\n// //     setoffsetTop(target.offsetTop )\n// //   }\n// //   // setoffsetTop(target.offsetTop )\n// //   // setoffsetTop(e.pageY )\n// //   // setoffsetTop(e.screenY )\n// //   setTrHeight(target.offsetHeight)\n// // }\n// const mouseInEditDelete = (e) => {\n//   let target = e.target\n//   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n//   setFlowId(target.id)\n//   setoffsetTop(target.offsetTop - scrolled_by)\n//   setTrHeight(target.offsetHeight)\n//   setDisplay(\"flex\")\n// }\n// const mouseOutEditDelete = () => {\n//   // alert('mouce out')\n//   setDisplay(\"none\")\n// }\n//   return (\n//     <>\n//       <div id=\"big_table_overlay\">\n//         <div id=\"table_overlay\" className=\"table_overlay\" >\n//           <div id=\"table-ledger\" className ='table' style={{ width:`${table_width}%`}} >\n//             <div id=\"thead\" >\n//               <div className=\"tr\" id=\"trFirstRow\">\n//                 <div className=\"th\" coldiv=\"3\" id=\"period\" style={{width:`${periodWidth}%`}}>12/04/22 - 12/04/22</div>\n//                 {stream}             \n//               </div>\n//               <div className=\"tr\" id=\"trSecondRow\">\n//                 <div  className=\"th\" id=\"snHeader\" style={{width:`${snWidth}%`, position: `sticky`, left: `${0}`}}>S/N</div>\n//                 <div  className=\"th\" id=\"dateHeader\" style={{width:`${dateWidth}%`, position: `sticky`, left: `${snWidth+0.7}%`}}>Date</div>\n//                 <div   className=\"th\" id=\"descriptionHeader\" style={{width:`${descriptionWidth}%`, position: `sticky`, left: `${snWidth+dateWidth+1.2}%`}}>Description</div>\n//                 {streamHeader}\n//               </div>\n//             </div>\n//             <div id=\"tbody\">\n//               {flow.sort(function(a, b){return a.key - b.key})}\n//               <div className=\"tr\" id=\"addTr\">\n//                 <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n//                 <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n//                 <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n//                 {emptyTR}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <div id=\"EditDeleteOverlay\" onMouseOver={()=>{ setDisplay(\"flex\") }} onMouseOut={mouseOutEditDelete} style={{  display:display, top:offsetTop, height:trHeight}} >\n//         <button onClick={deleteFlowData} >X</button><br/>\n//         <button></button>\n//       </div>\n//     </>\n//   );\n}export default Ledger;","map":{"version":3,"names":["useState","useEffect","useMemo","useAccess","Ledger","console","log","document","cookie","access","setAccess"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/ledger/Ledger.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport useAccess from \"../accessToken\"\n// import {}\n\nfunction Ledger() {\nconsole.log(\"cookie\"+document.cookie)\n\n  const {access, setAccess} = useAccess('')\n//   setAccess(\"jdjdjk\")\n  console.log(access)\n\n  //   const [flowList, setFlowList] = useState([]);\n//   const [flow, setFlow] = useState([]);\n//   const [flowPages, setFlowPages] = useState([]);\n//   const [flowPage, setFlowPage] = useState(0);\n//   const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n//   const [emptyTR, setEmptyTR] = useState([]);\n//   const [flowId, setFlowId] = useState([]);\n\n//   const [steamList, setStreamList] = useState([]);\n//   const [stream, setStream] = useState([]);\n//   const [streamHeader, setStreamHeader] = useState([]);\n//   const [StreamPages, setStreamPages] = useState([]);\n//   const [Streampage, setStreamPage] = useState(0);\n\n//   const [display, setDisplay] = useState(\"none\");\n//   const [offsetTop, setoffsetTop] = useState(0);\n//   const [trHeight, setTrHeight] = useState(0);\n\n//   const streamWidth = 27.5\n//   const periodWidth = 46\n//   const snWidth = periodWidth*(0.1)\n//   const dateWidth = periodWidth*(0.2)\n//   const descriptionWidth = periodWidth*(0.7)\n//   const flowWidth = streamWidth/2\n//   const table_width = (stream.length*streamWidth) + periodWidth\n\n//   // CashStream data management----------------------------------------------------------------------------------------------------\n//   const stream_Success = async(data) => {\n//     await setStreamList(data.results);\n//     const newPages = [];\n//     if (data.count > 10) {\n//       for (let i=0; i<Math.ceil(data.count / 10); i++) {\n//         newPages.push({\n//           name: (i+1).toString(),\n//           page: i,\n//         });\n//         console.log(\"page\",i);\n//       }\n//       if (Streampage > newPages.length-1) {\n//         await setStreamPage(Streampage-1);\n//       }\n//     } else {\n//       await setStreamPage(0);\n//     }\n//     await setStreamPages(newPages);\n//   };\n\n//   const getStreamData = async()=>{\n//     await get_cashStream(Streampage, stream_Success, (text)=>{console.log(\"Error: \", text)});\n//   };\n//   useEffect(()=>{\n//     getStreamData();\n//   }, [Streampage]);\n\n//   useEffect(() => {\n//     setStream(\n//       steamList.map(function(item){\n//         return(\n//           <div className=\"th stream\" coldiv=\"2\" style={{width:`${streamWidth}%`}}>{item.name}</div>\n//         )\n//       })\n//     );\n\n//     setStreamHeader(\n//       steamList.map(function(item){\n        \n//         return(\n//           <>\n//             <div className=\"th\" rowdiv=\"2\" style={{width:`${flowWidth}%`}}>Credit</div>\n//             <div className=\"th\" rowdiv=\"2\" style={{width:`${flowWidth}%`}}>Debit</div>\n//           </>\n//         )\n//       })\n//     )\n//   }, [steamList]);\n\n\n//   // CashFlow data management--------------------------------------------------------------------------------------------------\n//   const flow_Success = async(data) => {\n//     await setFlowList(data.results);\n//     const newPages = [];\n//     if (data.count > 10) {\n//       for (let i=0; i<Math.ceil(data.count / 10); i++) {\n//         newPages.push({\n//           name: (i+1).toString(),\n//           page: i,\n//         });\n//         // console.log(\"page\",i);\n//       }\n//       if (flowPage > newPages.length-1) {\n//         await setFlowPage(page-1);\n//       }\n//     } else {\n//       await setFlowPage(0);\n//     }\n//     await setFlowPages(newPages);\n//   };\n\n//   const getData = async()=>{\n//     await get_cashFlow(flowPage, flow_Success, (text)=>{console.log(\"Error: \", text)});\n//   };\n\n//   useEffect(async()=>{\n//     await getData();\n//   }, [flowPage]);\n  \n\n//   // send flow list to the dom\n//     useEffect(() => {   \n//       let newList = []\n//       const trEmpty = []\n\n//         steamList.map(\n//           function(streamItem, id, arr){\n//             trEmpty.push(\n//               <>\n//                 <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n//                 <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n//               </>\n//             );\n            \n//             return (\n//                 flowList.map(\n//                   async function(flowItem, pk, flow_arr){\n\n//                     if (flowItem.CashStream_Data.name === arr[id].name){\n//                     const nullTd = [];\n//                     const reversNullTd = [];\n//                     const editDelete = [];\n\n//                       for( var i =0; i < id; i++ ){\n//                         nullTd.push(\n//                           <>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                           </>\n//                         );\n//                       };\n\n//                       for(var i = (arr.length-1); id < i; i-- ){\n//                         reversNullTd.push(\n//                           <>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                             <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n//                           </>\n//                         );\n\n//                       };\n\n                      \n\n\n//                       const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n\n                      \n\n//                       await newList.push(\n//                         <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n//                           <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n//                           <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n//                           {nullTd}\n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n//                           <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n//                           {reversNullTd}\n//                         </div>\n//                       )\n//                     }\n//                   }\n//                 )\n//           )\n//           }\n//         )\n\n//       setFlow( newList );\n//       setEmptyTR(trEmpty)\n//   }, [flowList, setFlow, deleteFlowData]);\n\n//   // delete flow data\n//   const deleteFlowData = async()=>{\n//     await delete_cashFlow(flowId, flow_Success);\n//     getData()\n//     setDisplay(\"none\")\n//   };\n\n\n\n\n// // const boxRef = React.useRef(null);\n// // const table_overlayRef = React.useRef(null);\n\n// // const mouseInEditDelete = (e) => {\n// //   setDisplay(\"flex\")\n\n// //   let target = e.target\n// //   // let elem = document.getElementsByClassName('flowTr')[0].getClientRects()[0]\n\n// //   // console.log(e);\n// //   // console.log(elem);\n// // //   console.log(document.getElementsByClassName('flowTr')[0].getClientRects()[0])\n// // //   console.log(boxRef);\n// //   // console.log(table_overlayRef.offsetTop);\n// // //   console.log(e.target.offsetTop);\n// //   // console.log(\"screenY:\" + e.screenY);\n// //   // console.log(\"offsetY:\" + e.pageY);\n// //   // console.log(\"clientY:\" + e.clientY);\n// // //   console.log(target.offsetTop);\n\n// // //   setoffsetBottom(target.offsetHeight)\n// // //   setoffsetTop(boxRef.current.scrollHeight)\n// // //   setoffsetTop(target.offsetTop )\n// //   if(target.offsetTop<(table_overlayRef.offsetTop+table_overlayRef.offsetHeight)){\n// //     setoffsetTop(target.offsetTop )\n// //   }\n// //   // setoffsetTop(target.offsetTop )\n// //   // setoffsetTop(e.pageY )\n// //   // setoffsetTop(e.screenY )\n// //   setTrHeight(target.offsetHeight)\n// // }\n\n\n\n// const mouseInEditDelete = (e) => {\n//   let target = e.target\n//   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n\n//   setFlowId(target.id)\n//   setoffsetTop(target.offsetTop - scrolled_by)\n//   setTrHeight(target.offsetHeight)\n//   setDisplay(\"flex\")\n// }\n\n// const mouseOutEditDelete = () => {\n//   // alert('mouce out')\n//   setDisplay(\"none\")\n// }\n\n\n//   return (\n//     <>\n//       <div id=\"big_table_overlay\">\n//         <div id=\"table_overlay\" className=\"table_overlay\" >\n//           <div id=\"table-ledger\" className ='table' style={{ width:`${table_width}%`}} >\n//             <div id=\"thead\" >\n//               <div className=\"tr\" id=\"trFirstRow\">\n//                 <div className=\"th\" coldiv=\"3\" id=\"period\" style={{width:`${periodWidth}%`}}>12/04/22 - 12/04/22</div>\n//                 {stream}             \n//               </div>\n//               <div className=\"tr\" id=\"trSecondRow\">\n//                 <div  className=\"th\" id=\"snHeader\" style={{width:`${snWidth}%`, position: `sticky`, left: `${0}`}}>S/N</div>\n//                 <div  className=\"th\" id=\"dateHeader\" style={{width:`${dateWidth}%`, position: `sticky`, left: `${snWidth+0.7}%`}}>Date</div>\n//                 <div   className=\"th\" id=\"descriptionHeader\" style={{width:`${descriptionWidth}%`, position: `sticky`, left: `${snWidth+dateWidth+1.2}%`}}>Description</div>\n//                 {streamHeader}\n//               </div>\n//             </div>\n//             <div id=\"tbody\">\n//               {flow.sort(function(a, b){return a.key - b.key})}\n//               <div className=\"tr\" id=\"addTr\">\n//                 <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n//                 <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n//                 <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n//                 {emptyTR}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       <div id=\"EditDeleteOverlay\" onMouseOver={()=>{ setDisplay(\"flex\") }} onMouseOut={mouseOutEditDelete} style={{  display:display, top:offsetTop, height:trHeight}} >\n//         <button onClick={deleteFlowData} >X</button><br/>\n//         <button></button>\n//       </div>\n//     </>\n//   );\n}\n  \n\n\nexport default Ledger"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,OAA9B,KAA6C,OAA7C,CACA,MAAOC,UAAP,KAAsB,gBAAtB,CACA;AAEA,QAASC,OAAT,EAAkB,CAClBC,OAAO,CAACC,GAAR,CAAY,SAASC,QAAQ,CAACC,MAA9B,EAEE,eAA4BL,SAAS,CAAC,EAAD,CAArC,CAAOM,MAAP,YAAOA,MAAP,CAAeC,SAAf,YAAeA,SAAf,CACF;AACEL,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACC,CAID,cAAeL,OAAf"},"metadata":{},"sourceType":"module"}