{"ast":null,"code":"import { backendURL } from \"../../backendURL\";\nexport const verifyTokens = async access => {\n  const refreshtoken = localStorage.getItem(\"refreshToken\");\n  console.log(\"verifying tokens......\"); // console.log(access)\n  // console.log(refreshtoken)\n  // Verifying access token___________________________________________________________________________________\n\n  const verify_access_token = await fetch(console.log(\"verifying access token......\")`${backendURL}/user/verifyAccess/`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'Application/JSON',\n      'Content-Type': 'Application/json'\n    },\n    body: JSON.stringify({\n      \"token\": access\n    })\n  });\n\n  if (verify_access_token.status === (401 || 400)) {\n    // fetching new access and refresh token___________________________________________________________________________________\n    const get_access_token = await fetch(`${backendURL}/user/refresh/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'Application/JSON',\n        'Content-Type': 'Application/json'\n      },\n      body: JSON.stringify({\n        \"refresh\": refreshtoken\n      })\n    });\n\n    if (get_access_token.status === 200) {\n      await localStorage.setItem(\"refreshToken\", verify_access_token.refresh);\n      const access = verify_access_token.access;\n    }\n\n    if (get_access_token.status === (401 || 400)) {\n      // Verifying refresh token__________________________________________________________________________________\n      const verify_refresh_token = await fetch(`${backendURL}/user/verifyRefresh/`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'Application/JSON',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"token\": refreshtoken\n        })\n      });\n\n      if (verify_refresh_token.status === (401 || 400)) {\n        alert(\"session expired, please log in again\");\n        window.location.assign(\"/login\");\n      }\n    }\n  }\n\n  ;\n};","map":{"version":3,"names":["backendURL","verifyTokens","access","refreshtoken","localStorage","getItem","console","log","verify_access_token","fetch","method","headers","body","JSON","stringify","status","get_access_token","setItem","refresh","verify_refresh_token","alert","window","location","assign"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/auths/verifyTokens.js"],"sourcesContent":["import {backendURL} from \"../../backendURL\"\n\nexport const verifyTokens = async (access) => {\n    \n    const refreshtoken =  localStorage.getItem(\"refreshToken\");\n    console.log(\"verifying tokens......\")\n    // console.log(access)\n    // console.log(refreshtoken)\n    \n    // Verifying access token___________________________________________________________________________________\n    const verify_access_token = await fetch(\n        console.log(\"verifying access token......\")\n      `${backendURL}/user/verifyAccess/`,\n      {\n          method: 'POST',\n          headers: {\n              'Accept': 'Application/JSON',\n              'Content-Type': 'Application/json',\n          },\n          body: JSON.stringify({\n            \"token\": access,\n          })\n      }\n    );\n  \n    if (verify_access_token.status === (401||400) ) {\n    // fetching new access and refresh token___________________________________________________________________________________\n      const get_access_token = await fetch(\n        `${backendURL}/user/refresh/`,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'Application/JSON',\n                'Content-Type': 'Application/json',\n            },\n            body: JSON.stringify({\n              \"refresh\": refreshtoken,\n            })\n        }\n      );\n  \n      if (get_access_token.status === 200) {\n        await localStorage.setItem(\"refreshToken\", verify_access_token.refresh);\n        const access = verify_access_token.access\n      }\n      if (get_access_token.status === (401||400)) {\n        // Verifying refresh token__________________________________________________________________________________\n        const verify_refresh_token = await fetch(\n        `${backendURL}/user/verifyRefresh/`,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'Application/JSON',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              \"token\": refreshtoken,\n            })\n        }\n        );\n    \n        if (verify_refresh_token.status === (401||400)) {\n            alert(\"session expired, please log in again\")\n            window.location.assign(\"/login\");\n        }\n\n      }\n  \n    };\n    \n    \n}\n"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,kBAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;EAE1C,MAAMC,YAAY,GAAIC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAtB;EACAC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAH0C,CAI1C;EACA;EAEA;;EACA,MAAMC,mBAAmB,GAAG,MAAMC,KAAK,CACnCH,OAAO,CAACC,GAAR,CAAY,8BAAZ,CACD,GAAEP,UAAW,qBAFuB,EAGrC;IACIU,MAAM,EAAE,MADZ;IAEIC,OAAO,EAAE;MACL,UAAU,kBADL;MAEL,gBAAgB;IAFX,CAFb;IAMIC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnB,SAASZ;IADU,CAAf;EANV,CAHqC,CAAvC;;EAeA,IAAIM,mBAAmB,CAACO,MAApB,MAAgC,OAAK,GAArC,CAAJ,EAAgD;IAChD;IACE,MAAMC,gBAAgB,GAAG,MAAMP,KAAK,CACjC,GAAET,UAAW,gBADoB,EAElC;MACIU,MAAM,EAAE,MADZ;MAEIC,OAAO,EAAE;QACL,UAAU,kBADL;QAEL,gBAAgB;MAFX,CAFb;MAMIC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnB,WAAWX;MADQ,CAAf;IANV,CAFkC,CAApC;;IAcA,IAAIa,gBAAgB,CAACD,MAAjB,KAA4B,GAAhC,EAAqC;MACnC,MAAMX,YAAY,CAACa,OAAb,CAAqB,cAArB,EAAqCT,mBAAmB,CAACU,OAAzD,CAAN;MACA,MAAMhB,MAAM,GAAGM,mBAAmB,CAACN,MAAnC;IACD;;IACD,IAAIc,gBAAgB,CAACD,MAAjB,MAA6B,OAAK,GAAlC,CAAJ,EAA4C;MAC1C;MACA,MAAMI,oBAAoB,GAAG,MAAMV,KAAK,CACvC,GAAET,UAAW,sBAD0B,EAExC;QACIU,MAAM,EAAE,MADZ;QAEIC,OAAO,EAAE;UACL,UAAU,kBADL;UAEL,gBAAgB;QAFX,CAFb;QAMIC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnB,SAASX;QADU,CAAf;MANV,CAFwC,CAAxC;;MAcA,IAAIgB,oBAAoB,CAACJ,MAArB,MAAiC,OAAK,GAAtC,CAAJ,EAAgD;QAC5CK,KAAK,CAAC,sCAAD,CAAL;QACAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,QAAvB;MACH;IAEF;EAEF;;EAAA;AAGJ,CArEM"},"metadata":{},"sourceType":"module"}