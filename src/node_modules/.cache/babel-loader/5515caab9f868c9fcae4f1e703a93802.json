{"ast":null,"code":"import React from 'react';\nimport { useState, useEffect, useMemo } from 'react';\nimport { get_cashFlow } from './api/cashFow_CRUD';\nimport useAccess from \"../../auths/accessToken\";\n\nfunction FlowDomManagement(stream, steamList) {// const [flowList, setFlowList] = useState([]);\n  // const [flow, setFlow] = useState([]);\n  // const [flowPages, setFlowPages] = useState([]);\n  // const [flowPage, setFlowPage] = useState(0);\n  // const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n  // const [emptyTR, setEmptyTR] = useState([]);\n  // const [flowId, setFlowId] = useState([]);\n  // const {access, setAccess} = useAccess('')\n  // const streamWidth = 27.5\n  // const periodWidth = 46\n  // const flowWidth = streamWidth/2\n  // const snWidth = periodWidth*(0.1)\n  // const dateWidth = periodWidth*(0.2)\n  // const descriptionWidth = periodWidth*(0.7)\n  // const [display, setDisplay] = useState(\"none\");\n  // const [offsetTop, setoffsetTop] = useState(0);\n  // const [trHeight, setTrHeight] = useState(0);\n  // const table_width = (stream.length*streamWidth) + periodWidth\n  // const set_Access = (Access_token) => {\n  //   setAccess(Access_token)\n  // }\n  // const flow_Success = async(data, page) => {\n  //   await setFlowList(data.results);\n  //   const newPages = [];\n  //   if (data.count > 10) {\n  //     for (let i=0; i<Math.ceil(data.count / 10); i++) {\n  //       newPages.push({\n  //         name: (i+1).toString(),\n  //         page: i,\n  //       });\n  //       // console.log(\"page\",i);\n  //     }\n  //     if (flowPage > newPages.length-1) {\n  //       await setFlowPage(page-1);\n  //     }\n  //   } else {\n  //     await setFlowPage(0);\n  //   }\n  //   await setFlowPages(newPages);\n  // };\n  // const getData = async()=>{\n  //   await get_cashFlow(flowPage, flow_Success, (text)=>{console.log(\"Error: \", text, access, set_Access)});\n  // };\n  // useEffect(async()=>{\n  //   await getData();\n  // }, [access]);\n  // // const deleteFlowData = async()=>{\n  // //   await delete_cashFlow(flowId, flow_Success);\n  // //   getData()\n  // //   setDisplay(\"none\")\n  // // };\n  // // send flow list to the dom\n  // useEffect(async() => {   \n  //   let newList = []\n  //   const trEmpty = []\n  //   await steamList.map(\n  //       function(streamItem, id, arr){\n  //         trEmpty.push(\n  //           <>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //           </>\n  //         );\n  //         return (\n  //             flowList.map(\n  //               async function(flowItem, pk, flow_arr){\n  //                 if (flowItem.CashStream_Data.name === arr[id].name){\n  //                 const nullTd = [];\n  //                 const reversNullTd = [];\n  //                 const editDelete = [];\n  //                   for( var i =0; i < id; i++ ){\n  //                     nullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n  //                   for(var i = (arr.length-1); id < i; i-- ){\n  //                     reversNullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n  //                   const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n  //                   await newList.push(\n  //                     <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n  //                       <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n  //                       {nullTd}\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n  //                       {reversNullTd}\n  //                     </div>\n  //                   )\n  //                 }\n  //               }\n  //             )\n  //       )\n  //       }\n  //     )\n  //   setFlow( newList );\n  //   setEmptyTR(trEmpty)\n  // }, [flowList, setFlow]);\n  // // }, [flowList, setFlow, deleteFlowData]);\n  // const mouseInEditDelete = (e) => {\n  //   let target = e.target\n  //   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n  //   setFlowId(target.id)\n  //   setoffsetTop(target.offsetTop - scrolled_by)\n  //   setTrHeight(target.offsetHeight)\n  //   setDisplay(\"flex\")\n  // }\n  // const mouseOutEditDelete = () => {\n  //   // alert('mouce out')\n  //   setDisplay(\"none\")\n  // }\n  // return (\n  //       <div id=\"tbody\">\n  //           {flow.sort(function(a, b){return a.key - b.key})}\n  //           <div className=\"tr\" id=\"addTr\">\n  //               <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n  //               <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n  //               <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n  //               {emptyTR}\n  //           </div>\n  //       </div>\n  // )\n}\n\n_c = FlowDomManagement;\nexport default FlowDomManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlowDomManagement\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","get_cashFlow","useAccess","FlowDomManagement","stream","steamList"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/ledger/components/Flow.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect, useMemo } from 'react';\nimport {get_cashFlow} from './api/cashFow_CRUD'\nimport useAccess from \"../../auths/accessToken\"\n    \n    \nfunction FlowDomManagement(stream, steamList) {\n  // const [flowList, setFlowList] = useState([]);\n  // const [flow, setFlow] = useState([]);\n  // const [flowPages, setFlowPages] = useState([]);\n  // const [flowPage, setFlowPage] = useState(0);\n  // const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n  // const [emptyTR, setEmptyTR] = useState([]);\n  // const [flowId, setFlowId] = useState([]);\n  // const {access, setAccess} = useAccess('')\n\n  // const streamWidth = 27.5\n  // const periodWidth = 46\n  // const flowWidth = streamWidth/2\n  // const snWidth = periodWidth*(0.1)\n  // const dateWidth = periodWidth*(0.2)\n  // const descriptionWidth = periodWidth*(0.7)\n\n  // const [display, setDisplay] = useState(\"none\");\n  // const [offsetTop, setoffsetTop] = useState(0);\n  // const [trHeight, setTrHeight] = useState(0);\n  // const table_width = (stream.length*streamWidth) + periodWidth\n\n  // const set_Access = (Access_token) => {\n  //   setAccess(Access_token)\n  // }\n\n  // const flow_Success = async(data, page) => {\n  //   await setFlowList(data.results);\n  //   const newPages = [];\n  //   if (data.count > 10) {\n  //     for (let i=0; i<Math.ceil(data.count / 10); i++) {\n  //       newPages.push({\n  //         name: (i+1).toString(),\n  //         page: i,\n  //       });\n  //       // console.log(\"page\",i);\n  //     }\n  //     if (flowPage > newPages.length-1) {\n  //       await setFlowPage(page-1);\n  //     }\n  //   } else {\n  //     await setFlowPage(0);\n  //   }\n  //   await setFlowPages(newPages);\n  // };\n\n  // const getData = async()=>{\n  //   await get_cashFlow(flowPage, flow_Success, (text)=>{console.log(\"Error: \", text, access, set_Access)});\n  // };\n\n  // useEffect(async()=>{\n  //   await getData();\n  // }, [access]);\n\n  // // const deleteFlowData = async()=>{\n  // //   await delete_cashFlow(flowId, flow_Success);\n  // //   getData()\n  // //   setDisplay(\"none\")\n  // // };\n\n  // // send flow list to the dom\n\n  // useEffect(async() => {   \n  //   let newList = []\n  //   const trEmpty = []\n\n  //   await steamList.map(\n  //       function(streamItem, id, arr){\n  //         trEmpty.push(\n  //           <>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //           </>\n  //         );\n          \n  //         return (\n  //             flowList.map(\n  //               async function(flowItem, pk, flow_arr){\n\n  //                 if (flowItem.CashStream_Data.name === arr[id].name){\n  //                 const nullTd = [];\n  //                 const reversNullTd = [];\n  //                 const editDelete = [];\n\n  //                   for( var i =0; i < id; i++ ){\n  //                     nullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n\n  //                   for(var i = (arr.length-1); id < i; i-- ){\n  //                     reversNullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n\n  //                   };\n\n                    \n\n\n  //                   const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n\n                    \n\n  //                   await newList.push(\n  //                     <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n  //                       <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n  //                       {nullTd}\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n  //                       {reversNullTd}\n  //                     </div>\n  //                   )\n  //                 }\n  //               }\n  //             )\n  //       )\n  //       }\n  //     )\n\n  //   setFlow( newList );\n  //   setEmptyTR(trEmpty)\n  // }, [flowList, setFlow]);\n  // // }, [flowList, setFlow, deleteFlowData]);\n\n\n\n  // const mouseInEditDelete = (e) => {\n  //   let target = e.target\n  //   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n\n  //   setFlowId(target.id)\n  //   setoffsetTop(target.offsetTop - scrolled_by)\n  //   setTrHeight(target.offsetHeight)\n  //   setDisplay(\"flex\")\n  // }\n\n  // const mouseOutEditDelete = () => {\n  //   // alert('mouce out')\n  //   setDisplay(\"none\")\n  // }\n\n  // return (\n  //       <div id=\"tbody\">\n  //           {flow.sort(function(a, b){return a.key - b.key})}\n  //           <div className=\"tr\" id=\"addTr\">\n  //               <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n  //               <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n  //               <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n  //               {emptyTR}\n  //           </div>\n  //       </div>\n  // )\n}\n\nexport default FlowDomManagement"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AACA,SAAQC,YAAR,QAA2B,oBAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,SAAnC,EAA8C,CAC5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAKA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAIA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD;;KAjKQF,iB;AAmKT,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}