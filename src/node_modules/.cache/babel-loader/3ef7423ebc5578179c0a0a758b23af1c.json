{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect, useMemo } from 'react';\nimport { get_cashFlow } from './api/cashFow_CRUD';\nimport useAccess from \"../../auths/accessToken\";\n\nfunction FlowDomManagement(stream, steamList) {\n  _s();\n\n  const [flowList, setFlowList] = useState([]);\n  const [flow, setFlow] = useState([]);\n  const [flowPages, setFlowPages] = useState([]);\n  const [flowPage, setFlowPage] = useState(0);\n  const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n  const [emptyTR, setEmptyTR] = useState([]);\n  const [flowId, setFlowId] = useState([]);\n  const {\n    access,\n    setAccess\n  } = useAccess('');\n  const streamWidth = 27.5;\n  const periodWidth = 46;\n  const flowWidth = streamWidth / 2;\n  const snWidth = periodWidth * 0.1;\n  const dateWidth = periodWidth * 0.2;\n  const descriptionWidth = periodWidth * 0.7;\n  const [display, setDisplay] = useState(\"none\");\n  const [offsetTop, setoffsetTop] = useState(0);\n  const [trHeight, setTrHeight] = useState(0);\n  const table_width = stream.length * streamWidth + periodWidth;\n\n  const set_Access = Access_token => {\n    setAccess(Access_token);\n  };\n\n  const flow_Success = async (data, page) => {\n    await setFlowList(data.results);\n    const newPages = [];\n\n    if (data.count > 10) {\n      for (let i = 0; i < Math.ceil(data.count / 10); i++) {\n        newPages.push({\n          name: (i + 1).toString(),\n          page: i\n        }); // console.log(\"page\",i);\n      }\n\n      if (flowPage > newPages.length - 1) {\n        await setFlowPage(page - 1);\n      }\n    } else {\n      await setFlowPage(0);\n    }\n\n    await setFlowPages(newPages);\n  };\n\n  const flow_fail = text => {\n    console.log(\"Error: \", text);\n  };\n\n  const getData = async () => {\n    await get_cashFlow(flowPage, flow_Success, flow_fail, access, set_Access);\n  }; // useEffect(async()=>{\n  //   await getData();\n  // }, [access]);\n  // const deleteFlowData = async()=>{\n  //   await delete_cashFlow(flowId, flow_Success);\n  //   getData()\n  //   setDisplay(\"none\")\n  // };\n  // send flow list to the dom\n  // useEffect(async() => {   \n  //   let newList = []\n  //   const trEmpty = []\n  //   await steamList.map(\n  //       function(streamItem, id, arr){\n  //         trEmpty.push(\n  //           <>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //           </>\n  //         );\n  //         return (\n  //             flowList.map(\n  //               async function(flowItem, pk, flow_arr){\n  //                 if (flowItem.CashStream_Data.name === arr[id].name){\n  //                 const nullTd = [];\n  //                 const reversNullTd = [];\n  //                 const editDelete = [];\n  //                   for( var i =0; i < id; i++ ){\n  //                     nullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n  //                   for(var i = (arr.length-1); id < i; i-- ){\n  //                     reversNullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n  //                   const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n  //                   await newList.push(\n  //                     <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n  //                       <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n  //                       {nullTd}\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n  //                       {reversNullTd}\n  //                     </div>\n  //                   )\n  //                 }\n  //               }\n  //             )\n  //       )\n  //       }\n  //     )\n  //   setFlow( newList );\n  //   setEmptyTR(trEmpty)\n  // }, [flowList, setFlow]);\n  // // }, [flowList, setFlow, deleteFlowData]);\n  // const mouseInEditDelete = (e) => {\n  //   let target = e.target\n  //   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n  //   setFlowId(target.id)\n  //   setoffsetTop(target.offsetTop - scrolled_by)\n  //   setTrHeight(target.offsetHeight)\n  //   setDisplay(\"flex\")\n  // }\n  // const mouseOutEditDelete = () => {\n  //   // alert('mouce out')\n  //   setDisplay(\"none\")\n  // }\n  // return (\n  //       <div id=\"tbody\">\n  //           {flow.sort(function(a, b){return a.key - b.key})}\n  //           <div className=\"tr\" id=\"addTr\">\n  //               <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n  //               <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n  //               <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n  //               {emptyTR}\n  //           </div>\n  //       </div>\n  // )\n\n}\n\n_s(FlowDomManagement, \"jBluAg9W6YIHD9ETwn61d86scb8=\", false, function () {\n  return [useAccess];\n});\n\n_c = FlowDomManagement;\nexport default FlowDomManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlowDomManagement\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","get_cashFlow","useAccess","FlowDomManagement","stream","steamList","flowList","setFlowList","flow","setFlow","flowPages","setFlowPages","flowPage","setFlowPage","flow_DateSorted","setFlow_DateSorted","emptyTR","setEmptyTR","flowId","setFlowId","access","setAccess","streamWidth","periodWidth","flowWidth","snWidth","dateWidth","descriptionWidth","display","setDisplay","offsetTop","setoffsetTop","trHeight","setTrHeight","table_width","length","set_Access","Access_token","flow_Success","data","page","results","newPages","count","i","Math","ceil","push","name","toString","flow_fail","text","console","log","getData"],"sources":["/home/gcg/Desktop/Programing /python/Django main projects/projects/businessManagement/react_BusinessManagement/src/features/ledger/components/Flow.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect, useMemo } from 'react';\nimport {get_cashFlow} from './api/cashFow_CRUD'\nimport useAccess from \"../../auths/accessToken\"\n    \n    \nfunction FlowDomManagement(stream, steamList) {\n  const [flowList, setFlowList] = useState([]);\n  const [flow, setFlow] = useState([]);\n  const [flowPages, setFlowPages] = useState([]);\n  const [flowPage, setFlowPage] = useState(0);\n  const [flow_DateSorted, setFlow_DateSorted] = useState([]);\n  const [emptyTR, setEmptyTR] = useState([]);\n  const [flowId, setFlowId] = useState([]);\n  const {access, setAccess} = useAccess('')\n\n  const streamWidth = 27.5\n  const periodWidth = 46\n  const flowWidth = streamWidth/2\n  const snWidth = periodWidth*(0.1)\n  const dateWidth = periodWidth*(0.2)\n  const descriptionWidth = periodWidth*(0.7)\n\n  const [display, setDisplay] = useState(\"none\");\n  const [offsetTop, setoffsetTop] = useState(0);\n  const [trHeight, setTrHeight] = useState(0);\n  const table_width = (stream.length*streamWidth) + periodWidth\n\n  const set_Access = (Access_token) => {\n    setAccess(Access_token)\n  }\n\n  const flow_Success = async(data, page) => {\n    await setFlowList(data.results);\n    const newPages = [];\n    if (data.count > 10) {\n      for (let i=0; i<Math.ceil(data.count / 10); i++) {\n        newPages.push({\n          name: (i+1).toString(),\n          page: i,\n        });\n        // console.log(\"page\",i);\n      }\n      if (flowPage > newPages.length-1) {\n        await setFlowPage(page-1);\n      }\n    } else {\n      await setFlowPage(0);\n    }\n    await setFlowPages(newPages);\n  };\n\n  const flow_fail = (text) => {\n    console.log(\"Error: \", text)\n  }\n\n  const getData = async()=>{\n    await get_cashFlow(flowPage, flow_Success, flow_fail, access, set_Access);\n  };\n\n  // useEffect(async()=>{\n  //   await getData();\n  // }, [access]);\n\n  // const deleteFlowData = async()=>{\n  //   await delete_cashFlow(flowId, flow_Success);\n  //   getData()\n  //   setDisplay(\"none\")\n  // };\n\n  // send flow list to the dom\n\n  // useEffect(async() => {   \n  //   let newList = []\n  //   const trEmpty = []\n\n  //   await steamList.map(\n  //       function(streamItem, id, arr){\n  //         trEmpty.push(\n  //           <>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //             <div className=\"td\" style={{width:`${flowWidth}%`}}></div>\n  //           </>\n  //         );\n          \n  //         return (\n  //             flowList.map(\n  //               async function(flowItem, pk, flow_arr){\n\n  //                 if (flowItem.CashStream_Data.name === arr[id].name){\n  //                 const nullTd = [];\n  //                 const reversNullTd = [];\n  //                 const editDelete = [];\n\n  //                   for( var i =0; i < id; i++ ){\n  //                     nullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n  //                   };\n\n  //                   for(var i = (arr.length-1); id < i; i-- ){\n  //                     reversNullTd.push(\n  //                       <>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                         <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>0</div>\n  //                       </>\n  //                     );\n\n  //                   };\n\n                    \n\n\n  //                   const sortByDateTime = flowItem.created_at.replace(/-|:|[ \\t]/g,\"\");\n\n                    \n\n  //                   await newList.push(\n  //                     <div className=\"tr\" key={sortByDateTime} id={flowItem.id} onMouseMove={mouseInEditDelete} onMouseOver={mouseInEditDelete} onMouseOut={mouseOutEditDelete}>\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${snWidth}%`}}>{flow_arr.length-pk}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${dateWidth}%`}}> {flowItem.created_at.slice(0, 10)} <br/> {flowItem.created_at.slice(10)}  </div>\n  //                       <div className=\"td discriptionTd\" id={flowItem.id} style={{width:`${descriptionWidth}%`}}>{flowItem.description}</div>\n  //                       {nullTd}\n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Debit}</div> \n  //                       <div className=\"td\" id={flowItem.id} style={{width:`${flowWidth}%`}}>{flowItem.Credit}</div>\n  //                       {reversNullTd}\n  //                     </div>\n  //                   )\n  //                 }\n  //               }\n  //             )\n  //       )\n  //       }\n  //     )\n\n  //   setFlow( newList );\n  //   setEmptyTR(trEmpty)\n  // }, [flowList, setFlow]);\n  // // }, [flowList, setFlow, deleteFlowData]);\n\n\n\n  // const mouseInEditDelete = (e) => {\n  //   let target = e.target\n  //   let scrolled_by = document.getElementsByClassName('table_overlay')[0].scrollTop\n\n  //   setFlowId(target.id)\n  //   setoffsetTop(target.offsetTop - scrolled_by)\n  //   setTrHeight(target.offsetHeight)\n  //   setDisplay(\"flex\")\n  // }\n\n  // const mouseOutEditDelete = () => {\n  //   // alert('mouce out')\n  //   setDisplay(\"none\")\n  // }\n\n  // return (\n  //       <div id=\"tbody\">\n  //           {flow.sort(function(a, b){return a.key - b.key})}\n  //           <div className=\"tr\" id=\"addTr\">\n  //               <div className=\"td\"style={{width:`${snWidth}%`}}></div> \n  //               <div className=\"td\"style={{width:`${dateWidth}%`}}></div>\n  //               <div className=\"td discriptionTd\" style={{width:`${descriptionWidth}%`}}>Add</div>\n  //               {emptyTR}\n  //           </div>\n  //       </div>\n  // )\n}\n\nexport default FlowDomManagement"],"mappings":"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"},"metadata":{},"sourceType":"module"}